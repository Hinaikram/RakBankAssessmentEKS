name: Deploy EKS Infrastructure for Spring Boot Application

on:
  pull_request:
    inputs:
      TF_ENVIRONMENT:
        description: Terraform environment development, QA, Production
        required: true
  workflow_dispatch:
    inputs:
      TF_ENVIRONMENT:
        description: Terraform environment Development, QA, Production
        required: true

permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  terraform:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .  # Root folder, where your Terraform files are located

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init with Backend Config
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_S3_BUCKET }}" \
            -backend-config="key=${{ secrets.TF_STATE_FILE_KEY }}" \
            -backend-config="region=${{ secrets.S3_AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_DYNAMODB_TABLE }}"

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Export Terraform Outputs
        id: tf_outputs
        run: |
          echo "ECR_URL=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV

  build:
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Tests
        run: mvn test --no-transfer-progress

      - name: Build with Maven
        run: mvn clean install --no-transfer-progress

      - name: Build Docker image
        run: docker build -t springboot-app .

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag Docker image
        run: |
          docker tag springboot-app:latest $ECR_URL:${{ github.sha }}
          docker tag springboot-app:latest $ECR_URL:latest

      - name: Push Docker image to ECR
        run: |
          docker push $ECR_URL:${{ github.sha }}
          docker push $ECR_URL:latest

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: springboot-app
          path: target/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME

      - name: Deploy Kubernetes Manifests
        run: |
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml

      - name: Update Deployment Image and Restart
        run: |
          kubectl set image deployment/springboot-app springboot-app=$ECR_URL:${{ github.sha }}
          kubectl rollout restart deployment/springboot-app

      - name: Check Deployment Status
        run: |
          kubectl rollout status deployment/springboot-app --timeout=300s
